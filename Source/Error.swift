// Error.swift
//
// Copyright (c) 2014â€“2015 Alamofire Software Foundation (http://alamofire.org/)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import Foundation

/// The custom error codes generated by Alamofire.
public enum ErrorCode: Int {
    case InputStreamReadFailed           = -6000
    case OutputStreamWriteFailed         = -6001
    case ContentTypeValidationFailed     = -6002
    case StatusCodeValidationFailed      = -6003
    case DataSerializationFailed         = -6004
    case StringSerializationFailed       = -6005
    case JSONSerializationFailed         = -6006
    case PropertyListSerializationFailed = -6007
}

public class Error: ErrorType {
    public let Domain = "com.alamofire.error"
    public let code: Int
    public let failureReason: String?
    
    public init(code: ErrorCode, failureReason: String?) {
        self.code = code.rawValue
        self.failureReason = failureReason
    }
    
    public init(code: Int, failureReason: String?) {
        self.code = code
        self.failureReason = failureReason
    }
}

public final class SerializationError: Error {
    public let originalData: NSData?

    public init(code: ErrorCode, failureReason: String?, originalData: NSData?) {
        self.originalData = originalData

        super.init(code: code, failureReason: failureReason)
    }
    
    public init(code: Int, failureReason: String?, originalData: NSData?) {
        self.originalData = originalData

        super.init(code: code, failureReason: failureReason)
    }
}